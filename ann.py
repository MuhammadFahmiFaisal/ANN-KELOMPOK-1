# -*- coding: utf-8 -*-
"""ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xQSEvQKQlOm0PHBH1Ir1zNMJ8VC1IAr4
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Gunakan row ke-1 (index 0) sebagai header
url = "/content/drive/MyDrive/PRAK KECERDASAN/DATA SET/diabetes.csv"
cols = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness',
        'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
df = pd.read_csv(url, names=cols, skiprows=1)  # Lewati baris pertama (yang berisi nama kolom)

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv("/content/drive/MyDrive/PRAK KECERDASAN/DATA SET/diabetes.csv")
print("Dataset berhasil dimuat. Dimensi dataset:", data.shape)
print(data.head())

data.info()

"""PREPROCESING DATA"""

# Pisahkan fitur dan label
X = data.drop('Outcome', axis=1)
y = data['Outcome']

# Normalisasi fitur
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split ke data latih dan uji
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

"""BANGUN MODEL ANN"""

model = Sequential([
    Dense(16, input_shape=(8,), activation='relu'),
    Dense(8, activation='relu'),
    Dense(1, activation='sigmoid')  # binary classification
])

"""COMPILE DAN LATIH MODEL"""

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(X_train, y_train, epochs=100, verbose=1)

"""EVALUASI AKURASI MODEL"""

loss, accuracy = model.evaluate(X_test, y_test)
print(f"Akurasi model: {accuracy:.2f}")

"""PREDIKSI PASIEN"""

# Contoh data pasien: [6, 148, 72, 35, 0, 33.6, 0.627, 50]
sample = np.array([[6, 148, 72, 35, 0, 33.6, 0.627, 50]])
sample_scaled = scaler.transform(sample)

prediction = model.predict(sample_scaled)
hasil = "Diabetes" if prediction[0][0] > 0.5 else "Tidak Diabetes"
print("Prediksi:", hasil)

"""PREDIKSI DIABETES DENGAN FITUR INPUT OUTPUT"""

7# Input dari user
print("Masukkan data pasien untuk prediksi diabetes:")
print("Gunakan angka sesuai petunjuk di bawah ini!\n")

# Daftar fitur dan jenis nilainya
features = [
    ('Pregnancies', 'Jumlah kehamilan (int, 0-20)', int),
    ('Glucose', 'Kadar glukosa (int, 0-200)', int),
    ('BloodPressure', 'Tekanan darah (int, 0-140)', int),
    ('SkinThickness', 'Ketebalan kulit (int, 0-100)', int),
    ('Insulin', 'Tingkat insulin (int, 0-900)', int),
    ('BMI', 'Indeks massa tubuh (float, 0.0 - 70.0)', float),
    ('DiabetesPedigreeFunction', 'Faktor keturunan diabetes (float, 0.0 - 2.5)', float),
    ('Age', 'Umur (int, 0-120)', int)
]

user_input = []

# Ambil input dengan validasi
for feat_name, desc, typ in features:
    while True:
        try:
            val = typ(input(f"{feat_name} - {desc}: "))
            user_input.append(val)
            break
        except ValueError:
            print(f"⚠️ Masukkan angka yang valid untuk {feat_name}!")

# Ubah jadi array dan skalakan
sample = np.array([user_input])
sample_scaled = scaler.transform(sample)

# Prediksi
prediction = model.predict(sample_scaled)
hasil = "🩺 Diabetes" if prediction[0][0] > 0.5 else "✅ Tidak Diabetes"
print("\nHasil Prediksi:", hasil)